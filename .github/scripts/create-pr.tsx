import { readFileSync, existsSync } from "fs";
import { execSync } from "child_process";

interface ReleaseInfo {
  tag_name?: string;
  html_url?: string;
  body?: string;
  [key: string]: unknown;
}

function validateEnvironment(): {
  releaseTag: string;
  branchName: string;
  releaseInfo: ReleaseInfo | null;
} {
  const releaseTag = process.env.RELEASE_TAG;
  const branchName = process.env.BRANCH_NAME;
  const releaseInfo = process.env.RELEASE_INFO;

  if (!releaseTag || !branchName) {
    console.error(
      "Missing required environment variables: RELEASE_TAG, BRANCH_NAME",
    );
    process.exit(1);
  }

  let parsedReleaseInfo;
  try {
    parsedReleaseInfo = releaseInfo ? JSON.parse(releaseInfo) : null;
  } catch (error) {
    console.warn("Failed to parse RELEASE_INFO:", error);
    parsedReleaseInfo = null;
  }

  return { releaseTag, branchName, releaseInfo: parsedReleaseInfo };
}

function validateRequiredFiles(): void {
  if (!existsSync("upgrade-summary.md")) {
    console.error("Upgrade summary not found");
    process.exit(1);
  }
}

function hasGitChanges(): boolean {
  try {
    execSync("git diff --quiet", { stdio: "ignore" });
    return false;
  } catch {
    return true;
  }
}

function executeGitCommand(command: string): void {
  try {
    execSync(command, { stdio: "inherit" });
  } catch (error) {
    console.error(`Git command failed: ${command}`);
    throw error;
  }
}

function createPullRequestBody(
  summary: string,
  releaseInfo: ReleaseInfo | null,
): string {
  let body = `## ðŸš€ Automated Tambo Upgrade\n\n${summary}`;

  if (releaseInfo) {
    body += `\n\n### Release Information\n`;
    body += `- **Release**: [${releaseInfo.tag_name}](${releaseInfo.html_url})\n`;
    if (releaseInfo.body) {
      body += `- **Release Notes**: ${releaseInfo.body.substring(0, 200)}...\n`;
    }
  }

  body += `\n\n### Testing Checklist\n`;
  body += `Please verify the following before merging:\n`;
  body += `- [ ] App builds successfully (\`npm run build\`)\n`;
  body += `- [ ] Core functionality works as expected\n`;
  body += `- [ ] No TypeScript errors (\`npm run lint\`)\n`;
  body += `- [ ] Tests pass (\`npm test\`)\n\n`;
  body += `*This PR was automatically generated by the Tambo template maintenance workflow.*`;

  return body;
}

async function createPR(): Promise<void> {
  validateRequiredFiles();
  const { releaseTag, branchName, releaseInfo } = validateEnvironment();

  if (!hasGitChanges()) {
    console.log("No changes to commit, skipping PR creation");
    return;
  }

  const summary = readFileSync("upgrade-summary.md", "utf8");

  console.log(`Creating PR for branch: ${branchName}`);

  // Add all changes and commit
  executeGitCommand("git add .");
  executeGitCommand(
    `git commit -m "chore: upgrade to ${releaseTag}\n\nAutomated upgrade via template maintenance workflow"`,
  );
  executeGitCommand(`git push origin ${branchName}`);

  // Create PR
  const title = `chore: upgrade to ${releaseTag}`;
  const body = createPullRequestBody(summary, releaseInfo);

  executeGitCommand(
    `gh pr create --title "${title}" --body "${body}" --head ${branchName} --base main`,
  );
  console.log(`âœ… Pull request created successfully for ${releaseTag}`);
}

createPR().catch((e) => console.error(e));
